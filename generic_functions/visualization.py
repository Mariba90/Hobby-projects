# -*- coding: utf-8 -*-
"""comparing_cell_point_method_before_grouping.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wj1hSvWFkM5golV5qPJhP4UmKoi6zKOl

#Importing
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import random
from itertools import product, combinations
import random


# %matplotlib inline
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go


""" # color plot"""
colors_dic = {'black':'#000000','blue':'#3333FF','lightblue':'#3399FF',
                'green':'#009900','darkgreen':'#006666',
                'red':'#F01515','lightred':'#FF6666', 'purple':'#660033'}
                

colors_map = {0:colors_dic['black'],1:colors_dic['blue'],
            2:colors_dic['green'],3:colors_dic['red'],
            4:colors_dic['lightblue'], 5:colors_dic['darkgreen'],
            6:colors_dic['lightred'],7:colors_dic['purple']}


""" # wireframe function """
def wireframe_interac(fig,array,Lx=42,Lz=126):
    for s, e in combinations(array, 2):
        if (np.sum(np.abs(s-e)) == Lx):
            fig.add_trace(go.Scatter3d(x=[s[0],e[0]], y= [s[1],e[1]] , z=[s[2],e[2]] ,
                                            line=dict(color='gray',width=2), marker=dict(size=1,color='rgb(128, 128, 128)')))
    
        if (np.sum(np.abs(s-e)) == Lz) & (s[0]-e[0]==0) & (s[1]-e[1]==0):
            fig.add_trace(go.Scatter3d(x=[s[0],e[0]], y= [s[1],e[1]] , z=[s[2],e[2]] ,
                                        line=dict(color='gray',width=2), marker=dict(size=1,color='rgb(128, 128, 128)')))
    return fig 
  
def wireframe_ax(fig,array,Lx=42,Lz=126):
    for s, e in combinations(array, 2):
        if (np.sum(np.abs(s-e)) == Lx):
            ax.plot([s[0],e[0]], [s[1],e[1]] , [s[2],e[2]] , linewidth =2, color='gray')
        if (np.sum(np.abs(s-e)) == Lz) & (s[0]-e[0]==0) & (s[1]-e[1]==0):
            ax.plot([s[0],e[0]], [s[1],e[1]] , [s[2],e[2]] , linewidth = 2, color='gray')
    return fig
     

"""# Visualization functions"""


def anim_visualization (data_dic,thresh_dic,col_name,t_start,t_end,wireframe_array,Lx=42,Lz=126):
    lattice_grid = data_dic [t_start]
    threshold = thresh_dic [t_start]
    cols = lattice_grid.columns
    data=[go.Scatter3d(
          x= lattice_grid[lattice_grid[col_name] >= threshold][cols[0]],
          y= lattice_grid[lattice_grid[col_name] >= threshold][cols[1]],
          z= lattice_grid[lattice_grid[col_name] >= threshold][cols[2]],
          mode='markers',
          marker=dict(
              size= 2,
              # color = 'k',
              # colorscale= 'blue',
              opacity=0.8
          )
      ) ]
    
    frames = []
    for t in range(t_start+1,t_end+1):
        lattice_grid = data_dic [t]
        threshold = thresh_dic [t]
        frames.append(go.Frame(data=[go.Scatter3d(x= lattice_grid[lattice_grid[col_name] >= threshold][cols[0]],
                                                y= lattice_grid[lattice_grid[col_name] >= threshold][cols[1]],
                                                z= lattice_grid[lattice_grid[col_name] >= threshold][cols[2]])]))
        
    
    # frames.append(go.Layout(title_text="End Title"))
    
    # fig = go.Figure(data=data)
    
    
    fig = go.Figure(
      data=data,
      layout=go.Layout(
          title="Time = "+str(t_start),
          updatemenus=[dict(
              type="buttons",
              buttons=[dict(label="Play",
                            method="animate",
                            args=[None])])]
      ),
      frames=frames
    )
    
    fig = wireframe_interac (fig,wireframe_array,Lx,Lz)
    fig.show()
    return fig
    # fig.write_html(path_html+'/rise_point.html')


def anim_group_visualization (data_dic,t_start,t_end,wireframe_array,col_name='group_label',Lx=42,Lz=126):
    lattice_grid = data_dic [t_start][~ data_dic [t_start][col_name].isna()]
    cols = lattice_grid.columns
    data=[go.Scatter3d(
          x= lattice_grid [cols[0]],
          y= lattice_grid [cols[1]],
          z= lattice_grid [cols[2]],
          mode='markers',
          marker=dict(
              size=2,
              color = lattice_grid [col_name],
              colorscale= list(colors_dic.values()),
              opacity=0.8
          )
      ) ]
    
    frames = []
    for t in range(t_start+1,t_end+1):
        lattice_grid = data_dic [t][~ data_dic [t][col_name].isna()]
        frames.append(go.Frame(data=[go.Scatter3d(x= lattice_grid [cols[0]],
                                                y= lattice_grid [cols[1]],
                                                z= lattice_grid [cols[2]], 
                                                mode='markers',
                                                marker=dict(
                                                    size=2,
                                                    color = lattice_grid [col_name],
                                                    colorscale= list(colors_dic.values()),
                                                    opacity=0.8))]))
        
    
    # frames.append(go.Layout(title_text="End Title"))
    
    # fig = go.Figure(data=data)
    
    fig = go.Figure(
      data=data,
      layout=go.Layout(
          title="Time = "+str(t_start),
          updatemenus=[dict(
              type="buttons",
              buttons=[dict(label="Play",
                            method="animate",
                            args=[None])])]
      ),
      frames=frames
    )
    
    fig = wireframe_interac(fig,wireframe_array,Lx,Lz)
    fig.show()
    return fig
    # fig.write_html(path_html+'/rise_point.html')



def non_interactive_vis(data,threshold,threshold_col,color,wireframe_array,Lx=42,Lz=126):
    fig,ax = plt.subplots(figsize=(30,20))
    ax = fig.add_subplot(111, projection='3d') 
    cols = data.columns[:3]
    x = data [data[threshold_col] >= threshold][cols[0]]
    y = data [data[threshold_col] >= threshold][cols[1]]
    z = data [data[threshold_col] >= threshold][cols[2]]
    ax.scatter(x,y,z, s=30 , c =color)
    ax.azim = -60
    ax.dist = 10
    ax.elev = 30
    ax.set_xlim3d(min(wireframe_array[:,0])-22,max(wireframe_array[:,0])+22)
    ax.set_ylim3d(min(wireframe_array[:,1])-22,max(wireframe_array[:,1])+22)
    ax.set_zlim3d(min(wireframe_array[:,2])-22,max(wireframe_array[:,2])+22) 
    fig = wireframe_ax(fig,wireframe_array,Lx,Lz)
    return fig,ax

def non_interactive_vis_timesteps_save(t_s,t_e,data_dic,thresh_dic,threshold_col,color,wireframe_array,path_image,extension_name):
    for t in range(t_s,t_e+1):
        data = data_dic [t]
        threshold = thresh_dic [t]
        fig,ax = non_interactive_vis(data,threshold,threshold_col,color,wireframe_array)
        plt.savefig(path_image+'/'+extension_name+'_frame'+str(t)+'.png')
        fig.clf()
        ax.cla()

def non_interactive_vis_timesteps_show(t_s,t_e,data_dic,thresh_dic,threshold_col,color,wireframe_array):
    for t in range(t_s,t_e+1):
        data = data_dic [t]
        threshold = thresh_dic [t]
        fig,ax = non_interactive_vis(data,threshold,threshold_col,color,wireframe_array)
        plt.show()
        fig.clf()
        ax.cla()

def visualization(lattice_grid,threshold,col_name,wireframe_array,Lx=42,Lz=126):
    # visualizing the structure
    # visulizing the random points and lattice points 
    ### Plotly
    cols = lattice_grid.columns
    data=[go.Scatter3d(
          x= lattice_grid[lattice_grid[col_name] >= threshold][cols[0]],
          y= lattice_grid[lattice_grid[col_name] >= threshold][cols[1]],
          z= lattice_grid[lattice_grid[col_name] >= threshold][cols[2]],
          mode='markers',
          marker=dict(
              size= 2,
              # color = 'k',
              # colorscale= 'blue',
              opacity=0.8
          )
      ) ]
    
    
    
    
    fig = go.Figure(data=data)
    
    fig = wireframe_interac(fig,wireframe_array,Lx,Lz)
    
    
    # tight layout
    fig.update_layout(margin=dict(l=0, r=0, b=0, t=0) , showlegend=False )
    fig.show()
    return fig

  
def group_visualization(lattice_grid,wireframe_array,col_name='group_label',Lx=42,Lz=126):
    # visualizing the structure
    # visulizing the random points and lattice points 
    ### Plotly
    cols = lattice_grid.columns
    data=[go.Scatter3d(
          x= lattice_grid[~lattice_grid[col_name].isna()][cols[0]],
          y= lattice_grid[~lattice_grid[col_name].isna()][cols[1]],
          z= lattice_grid[~lattice_grid[col_name].isna()][cols[2]],
          mode='markers',
          marker=dict(
              size= 2,
              color =  lattice_grid[~lattice_grid[col_name].isna()] [col_name],
              colorscale= list(colors_dic.values()),
              opacity=0.8
          )
      ) ]
    
    
    
    
    fig = go.Figure(data=data)
    
    
    fig = wireframe_interac(fig,wireframe_array,Lx,Lz)
    # tight layout
    fig.update_layout(margin=dict(l=0, r=0, b=0, t=0) , showlegend=False )
    fig.show()
    return fig